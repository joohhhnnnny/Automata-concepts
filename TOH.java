package cst4;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author My PC
 */
public class TOH extends javax.swing.JFrame {
    
    private int numDisks;
    private String[] rods = new String[]{"A", "B", "C"};
    private List<String> moves = new ArrayList<>();
    private int[][] disks = new int[3][10]; 
    private int[] diskCounts = new int[3];
    private boolean gameOver = false;
    private JPanel panel;
    private JPanel towerPanel;
    private int moveCount = 0;
    private static int minMoves;
    /**
     * Creates new form TOH
     */
   public TOH() {
    initComponents();
    setSize(1200,700);
    getContentPane().setBackground(Color.GRAY);
    
    towerPanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            drawTowers(g);
        }
        @Override
        public Dimension getPreferredSize() {
            return new Dimension(800, 300);
        }
    };
     jScrollPane1.setViewportView(towerPanel);
    add(jScrollPane1, BorderLayout.CENTER);
    
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        moveArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fromROD = new javax.swing.JTextField();
        toROD = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        enterButton = new javax.swing.JButton();
        moveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMinimum = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnBack1 = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Tower of Hanoi");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TOWER OF HANOI");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Input number of disks:");

        moveArea.setColumns(20);
        moveArea.setRows(5);
        jScrollPane2.setViewportView(moveArea);

        jLabel3.setBackground(new java.awt.Color(153, 153, 153));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("What is your move?");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("FROM ROD:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("TO ROD:");

        fromROD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        toROD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Movements:");

        enterButton.setBackground(new java.awt.Color(102, 102, 102));
        enterButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        enterButton.setForeground(new java.awt.Color(255, 255, 255));
        enterButton.setText("ENTER");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        moveButton.setBackground(new java.awt.Color(102, 102, 102));
        moveButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        moveButton.setForeground(new java.awt.Color(255, 255, 255));
        moveButton.setText("MOVE");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        txtMinimum.setEditable(false);
        txtMinimum.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtMinimum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinimumActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(102, 102, 102));
        btnBack.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back to Main Menu");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnBack1.setBackground(new java.awt.Color(102, 102, 102));
        btnBack1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnBack1.setForeground(new java.awt.Color(255, 255, 255));
        btnBack1.setText("Reset");
        btnBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(488, 488, 488)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromROD, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toROD, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(moveButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(enterButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 250, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnBack1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(fromROD, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(toROD, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(moveButton))
                        .addGap(150, 150, 150))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(18, 18, 18)
                        .addComponent(btnBack1)
                        .addGap(100, 100, 100))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
    if (gameOver) {
        JOptionPane.showMessageDialog(this, "Game Over! Please start a new game.");
        return;
    }
    String fromRod = fromROD.getText();
    String toRod = toROD.getText();
    int fromRodIndex = getRodIndex(fromRod);
    int toRodIndex = getRodIndex(toRod);
    if (isValidMove(fromRodIndex, toRodIndex)) {
        moveDisk(fromRodIndex, toRodIndex);
        moves.add("Move disk from " + fromRod + " to " + toRod);
        moveArea.setText("");
        for (String move : moves) {
            moveArea.append(move + "\n");
        }
        towerPanel.repaint();
        if (isGameWon()) {
    int totalMoves = getMoveCount();
    JOptionPane.showMessageDialog(this, "Congratulations! You won!\nTotal executed moves: " + totalMoves);
    gameOver = true;
    restartGame();
}
    } else {
        JOptionPane.showMessageDialog(this, "Invalid move! You lose!");
        gameOver = true;
        restartGame();
    }
    }//GEN-LAST:event_moveButtonActionPerformed

    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonActionPerformed
        try {
        numDisks = Integer.parseInt(inputField.getText());
        if (numDisks < 1 || numDisks > 10) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a number between 1 and 10.");
        } else {
            for (int i = 0; i < numDisks; i++) {
                disks[0][i] = numDisks - i;
                diskCounts[0]++;
                
                minMoves = (1 << numDisks) - 1;
                txtMinimum.setText("Minimum required moves for " + numDisks + " Disks is: " + minMoves + "\n");
            }
            towerPanel.repaint(); 
            gameOver = false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input. Please enter a number.");
    }
    }//GEN-LAST:event_enterButtonActionPerformed

    private void txtMinimumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinimumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinimumActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MACHINE mainFrame = new MACHINE();
        mainFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack1ActionPerformed
        restartGame();
    }//GEN-LAST:event_btnBack1ActionPerformed
    
    private boolean isValidMove(int fromRodIndex, int toRodIndex) {
        if (diskCounts[fromRodIndex] == 0) {
            return false; 
        }
        if (diskCounts[toRodIndex] > 0 && disks[fromRodIndex][diskCounts[fromRodIndex] - 1] > disks[toRodIndex][diskCounts[toRodIndex] - 1]) {
            return false; 
        }
        return true;
    }
    
    private void moveDisk(int fromRodIndex, int toRodIndex) {
        int disk = disks[fromRodIndex][diskCounts[fromRodIndex] - 1];
        diskCounts[fromRodIndex]--;
        diskCounts[toRodIndex]++;
        disks[toRodIndex][diskCounts[toRodIndex] - 1] = disk;
        moveCount++;
    }

    private int getRodIndex(String rod) {
        for (int i = 0; i < rods.length; i++) {
            if (rods[i].equals(rod)) {
                return i;
            }
        }
        return -1; 
    }
    
    private boolean isGameWon() {
    if (diskCounts[2] != numDisks) {
        return false;
    }
    
    for (int i = 0; i < diskCounts[2] - 1; i++) {
        if (disks[2][i] < disks[2][i + 1]) { 
            return false;
        }
    }
    
    return true;
}

    private void restartGame() {
        numDisks = 0;
        moves.clear();
        for (int i = 0; i < 3; i++) {
            diskCounts[i] = 0;
            }
        towerPanel.repaint();
        moveArea.setText("");
        inputField.setText("");
        fromROD.setText("");
        toROD.setText("");
        
        if (this.panel != null) {
    this.panel.repaint();
    }
    }
    
        private void drawTowers(Graphics g) {
    int towerWidth = 20; 
    int towerHeight = 150;
    int baseY = 200; 
    int spacing = 200;

    for (int i = 0; i < 3; i++) {
        int x = 50 + i * spacing;
        g.fillRect(x, baseY, towerWidth, 10);
        g.fillRect(x + towerWidth / 2 - 5, baseY - towerHeight, 10, towerHeight);

        Color oldColor = g.getColor();
        
        int diskY = baseY - 20; 
        String[] colors = {"#FF0000", "#FFA500", "#FFFF00", "#33CC33", "#0066FF", "#7F00FF", "#FF69B4", "#B2FFFC", "#87CEEB", "#800000"};
        for (int j = 0; j < diskCounts[i]; j++) { 
            int diskSize = disks[i][j];
            int diskWidth = diskSize * 15; 
            int diskX = x + (towerWidth - diskWidth) / 2;
            
            g.setColor(Color.decode(colors[diskSize - 1])); 
            
            g.fillRect(diskX, diskY - j * 20, diskWidth, 20);
        }

        g.setColor(oldColor);
    }
}

        private String getDiskRepresentation(int diskSize) {
            StringBuilder representation = new StringBuilder();
                for (int i = 0; i < diskSize; i++) {
                representation.append("*");
    }
             return representation.toString();
}       
        public int getMoveCount() {
         return moveCount;
}
        
        
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TOH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TOH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TOH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TOH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TOH().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBack1;
    private javax.swing.JButton enterButton;
    private javax.swing.JTextField fromROD;
    private javax.swing.JTextField inputField;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea moveArea;
    private javax.swing.JButton moveButton;
    private javax.swing.JTextField toROD;
    private javax.swing.JTextField txtMinimum;
    // End of variables declaration//GEN-END:variables
}
