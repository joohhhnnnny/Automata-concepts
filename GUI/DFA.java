package cst4;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Administrator
 */
public class DFA extends javax.swing.JFrame {

    /**
     * Creates new form DFA
     */
    public DFA() {
        initComponents();
        setSize(1200, 700);
        
        Color lightGreen = new Color(144, 238, 144);  // Light green RGB
        getContentPane().setBackground(lightGreen);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea1 = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        btnInput = new javax.swing.JButton();
        txtField1 = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Deterministic Finite Automata");
        setBackground(new java.awt.Color(0, 51, 51));
        setPreferredSize(new java.awt.Dimension(1100, 700));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(102, 204, 0));

        txtArea1.setEditable(false);
        txtArea1.setBackground(new java.awt.Color(0, 0, 0));
        txtArea1.setColumns(20);
        txtArea1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtArea1.setForeground(new java.awt.Color(0, 255, 51));
        txtArea1.setRows(5);
        jScrollPane1.setViewportView(txtArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 990, 390));

        btnClear.setBackground(new java.awt.Color(51, 255, 51));
        btnClear.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 160, 50));

        btnInput.setBackground(new java.awt.Color(51, 255, 51));
        btnInput.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnInput.setForeground(new java.awt.Color(255, 255, 255));
        btnInput.setText("Input");
        btnInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputActionPerformed(evt);
            }
        });
        getContentPane().add(btnInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 160, 50));

        txtField1.setBackground(new java.awt.Color(0, 0, 0));
        txtField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtField1.setForeground(new java.awt.Color(0, 255, 51));
        txtField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtField1ActionPerformed(evt);
            }
        });
        getContentPane().add(txtField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 350, 110));

        btnBack.setBackground(new java.awt.Color(51, 255, 51));
        btnBack.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back to Main Menu");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 130, 210, 50));

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ONLY BINARY DIGITS ARE ACCEPTED");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtField1.setText("");
        txtArea1.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputActionPerformed
        String input = txtField1.getText();
    
    if (input.isEmpty()) {
        JOptionPane.showMessageDialog(this, "The Field is Empty.", "TxtField Error", JOptionPane.ERROR_MESSAGE);
    } else if (!input.matches("[01]+")) {
        JOptionPane.showMessageDialog(this, "Invalid Input. Only 0's and 1's are accepted.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } else {
        txtArea1.append("=================================\n");
        txtArea1.append("Deterministic Finite Automata\n");
        txtArea1.append("=================================\n");  
        txtArea1.append("L = {Set of All Strings that starts with 0}\n");
        txtArea1.append("Input String: " + input + "\n");
        txtArea1.append("\n");
        
        // Reset the field after processing
        txtField1.setText("");

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Check if the string starts with '0'
                if (input.charAt(0) != '0') {
                    Thread.sleep(2000);
                    txtArea1.append("-- Starting Program...\n");
                    Thread.sleep(1000);
                    txtArea1.append("-- We are currently at State A.\n");
                    Thread.sleep(1000);
                    txtArea1.append("-- Transitioning to another state...\n");
                    Thread.sleep(1000);
                    txtArea1.append("-- We are now in a Dead State!\n");
                    Thread.sleep(1000);
                    txtArea1.append("-- Final State: Not Accepted\n");
                } else {
                    txtArea1.append("-- Starting Program...\n");
                    Thread.sleep(1000);
                    txtArea1.append("-- We are currently at State A.\n");
                    Thread.sleep(1000);
                    txtArea1.append("-- Transitioning to State B...\n");

                    for (int i = 1; i < input.length(); i++) {
                        char ch = input.charAt(i);
                        Thread.sleep(1000);
                        txtArea1.append("-- Checking the next Character: " + ch + "\n");
                        Thread.sleep(1000);
                        txtArea1.append("-- Still in State B.\n");
                    }
                    txtArea1.append("-- Final State: Accepted!\n");
                }
                return null;
            }
        };

        worker.execute(); // Run it on a background thread to avoid UI freeze
    }
    }//GEN-LAST:event_btnInputActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MACHINE machineFrame = new MACHINE();
        machineFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DFA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DFA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DFA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DFA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DFA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea1;
    private javax.swing.JTextField txtField1;
    // End of variables declaration//GEN-END:variables
}
