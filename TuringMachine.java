package cst4;

import java.awt.*;
import javax.swing.*;


/**
 *
 * @author Administrator
 */
public class TuringMachine extends javax.swing.JFrame {
    
    private String currentState = "q0";
    private int tapeHead = 0;
    private int sum = 0;
    private JLabel[] tapeLabels;
    private final int TAPE_SIZE = 20; // Number of cells on the tape (adjust as needed)

    

    
    /**
     * Creates new form TuringMachine
     */
    public TuringMachine() {
        initComponents();
        setSize(1200, 700);
        getContentPane().setBackground(Color.PINK);
        
        tapeLabels = new JLabel[TAPE_SIZE];
        tapepanel.setLayout(new java.awt.GridLayout(1, TAPE_SIZE));

        for (int i = 0; i < TAPE_SIZE; i++) {
        tapeLabels[i] = new JLabel("_", SwingConstants.CENTER); // Default blank symbol
        tapeLabels[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
        tapeLabels[i].setOpaque(true);
        tapeLabels[i].setBackground(Color.WHITE);
        tapeLabels[i].setFont(new java.awt.Font("Segoe UI", Font.BOLD, 18));
        tapepanel.add(tapeLabels[i]);
        
        txtArea2.setText("L = {n + n | where n is the number of zero's}\n");
        txtArea2.setText("\n");
        }

        tapeLabels[0].setBackground(Color.PINK); // Initial tape head position

    }
    
    private void updateTape(char[] tapeContent) {
    for (int i = 0; i < tapeContent.length && i < TAPE_SIZE; i++) {
        tapeLabels[i].setText(Character.toString(tapeContent[i]));
    }

    // Clear previous tape head highlight
    for (JLabel label : tapeLabels) {
        label.setBackground(Color.WHITE);
    }

    // Highlight current tape head position
    if (tapeHead >= 0 && tapeHead < TAPE_SIZE) {
        tapeLabels[tapeHead].setBackground(Color.PINK);
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea2 = new javax.swing.JTextArea();
        btnInput = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtInput = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtArea3 = new javax.swing.JTextArea();
        tapepanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Turing Machine");
        setPreferredSize(new java.awt.Dimension(1200, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtArea1.setEditable(false);
        txtArea1.setBackground(new java.awt.Color(0, 0, 0));
        txtArea1.setColumns(20);
        txtArea1.setFont(new java.awt.Font("Segoe UI Semibold", 2, 18)); // NOI18N
        txtArea1.setForeground(new java.awt.Color(0, 255, 51));
        txtArea1.setRows(5);
        txtArea1.setText("Accepted Inputs\n\n0   (Zero's)\n+  (Addition operation)\n _  (Blank Symbol)");
        jScrollPane1.setViewportView(txtArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 240, 200));

        txtArea2.setEditable(false);
        txtArea2.setBackground(new java.awt.Color(0, 0, 0));
        txtArea2.setColumns(20);
        txtArea2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtArea2.setForeground(new java.awt.Color(0, 255, 51));
        txtArea2.setRows(5);
        jScrollPane2.setViewportView(txtArea2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 710, 330));

        btnInput.setBackground(new java.awt.Color(255, 51, 102));
        btnInput.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnInput.setForeground(new java.awt.Color(255, 255, 255));
        btnInput.setText("Input");
        btnInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputActionPerformed(evt);
            }
        });
        getContentPane().add(btnInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 470, 180, 60));

        btnClear.setBackground(new java.awt.Color(255, 51, 102));
        btnClear.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 380, 210, 60));

        btnBack.setBackground(new java.awt.Color(255, 51, 102));
        btnBack.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back to Main Menu");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 450, 210, 60));

        txtInput.setBackground(new java.awt.Color(0, 0, 0));
        txtInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtInput.setForeground(new java.awt.Color(0, 255, 51));
        getContentPane().add(txtInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 380, 410, 80));

        txtArea3.setBackground(new java.awt.Color(0, 0, 0));
        txtArea3.setColumns(20);
        txtArea3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtArea3.setForeground(new java.awt.Color(0, 255, 51));
        txtArea3.setRows(5);
        jScrollPane3.setViewportView(txtArea3);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 360, 100));
        getContentPane().add(tapepanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 540, 680, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputActionPerformed
        String biString = txtInput.getText();
        char[] myString = biString.toCharArray();
        
        if (!biString.matches("[0_+]+")) {
	    	JOptionPane.showMessageDialog(this, "Invalid Input. The input exceeded the given Language.\n", "Invalid Input!", JOptionPane.ERROR_MESSAGE);
	        return;
	    }
        
        SwingWorker<Void, Void> worker = new SwingWorker<>() {
        @Override
        protected Void doInBackground() throws Exception {
            
            while (!currentState.equals("qH")) {
                
                if (tapeHead < 0 || tapeHead >= myString.length) {
                    JOptionPane.showMessageDialog(TuringMachine.this, "Tape head moved out of bounds! Input Rejected.\n", "Out of Bounds!", JOptionPane.ERROR_MESSAGE);
                    return null;
                }
	            
	            char ch = myString[tapeHead];
	            updateTextArea("Tape Head at position " + tapeHead + "\nCurrent State: " + currentState + "\n");
                    updateTape(myString);
	            
	            switch (currentState) {
	                case "q0":
	                    if (ch == '0') {
	                        Thread.sleep(1000);
                                currentState = "qH";
	                        txtArea2.append("\n");
	                        txtArea2.append("Read _, Stay _, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null;
	                    } else if (ch == '+') {
	                        Thread.sleep(1000);
                                currentState = "qH";
                                txtArea2.append("\n");
	                        txtArea2.append("Read _, Stay _, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null;
	                    } else if (ch == '_') {
                                Thread.sleep(1000);
	                    	currentState = "q1";
	                    	txtArea2.append("\n");
	                    	txtArea2.append("Read _, Stay _, Move Right\n");
                                tapeHead++;
                                updateTape(myString);
	                    }
	                    break;

	                case "q1":
	                    if (ch == '0') {
                                Thread.sleep(1000);
	                        currentState = "q2"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read 0, Replace 1, Move Right\n");
	                        myString[tapeHead] = '1';
                                tapeHead++; 
                                updateTape(myString);
	                        sum++;
	                    } else if (ch == '_') {
                                Thread.sleep(1000);
                                currentState = "qH";
	                        txtArea2.append("\n");
	                        txtArea2.append("Read _, Stay _, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null;
	                    } else if (ch == '+') {
                                Thread.sleep(1000);
	                    	currentState = "qH";
                                txtArea2.append("\n");
	                    	txtArea2.append("Read _, Stay _, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null;
	                    }
	                    break;

	                case "q2":
	                    if (ch == '0') {
                                Thread.sleep(1000);
	                        currentState = "q2"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read 0, Replace 1, Move Right\n");
	                        myString[tapeHead] = '1';
                                tapeHead++; 
                                updateTape(myString);
	                        sum++;
                                
	                    } else if (ch == '_') {
                                Thread.sleep(1000);
                                currentState = "qH";
                                txtArea2.append("\n");
	                    	txtArea2.append("Read _, Stay _, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null;
	                        
	                    } else if (ch == '+') {
                                Thread.sleep(1000);
	                    	currentState = "q3"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read +, Replace 1, Move Right\n");
                                myString[tapeHead] = '1';
                                tapeHead++; 
                                updateTape(myString);
	                        sum++;
	                    }
	                    break;

	                case "q3":
                            if (ch == '0' ){
                                Thread.sleep(1000);
                                currentState = "q4"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read 0, Replace 1, Move Right\n");
                                myString[tapeHead] = '1';
                                tapeHead++; 
                                updateTape(myString);
	                        sum++; 
                            }
                            else if (ch == '+') {
                                Thread.sleep(1000);
	                    	currentState = "qH"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read +, Stay +, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null; // Ensure the method exits here
                            } else if (ch == '_') {
                                Thread.sleep(1000);
	                    	currentState = "qH"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read +, Stay +, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null; // Ensure the method exits here
                            }
                            break;
                            
                        case "q4":
                            if (ch == '0') {
                                Thread.sleep(1000);
	                        currentState = "q4"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read 0, Replace 1, Move Right\n");
	                        myString[tapeHead] = '1';
                                tapeHead++; 
                                updateTape(myString);
	                        sum++;                         
	                    } else if (ch == '+') {
                                Thread.sleep(1000);
	                    	currentState = "qH"; 
	                        txtArea2.append("\n");
	                        txtArea2.append("Read +, Stay +, Move to Halting State\n");
                                txtArea3.append("The program is in Halting State\n");
                                txtArea3.append("Input Rejected\n");
                                return null; // Ensure the method exits here 
                            } else if (ch == '_') {
                                Thread.sleep(1000);
                                currentState = "q5";
                                txtArea2.append("\n");
                                txtArea2.append("Read _, Stay _, Move Left\n");
                                tapeHead--; 
                                updateTape(myString);
                            }
                            break;
                            
                        case "q5":
                            if (ch == '1') {
                                Thread.sleep(1000);
                                currentState = "q6";
                                txtArea2.append("\n");
                                txtArea2.append("Read 1, Replace _, Stay Put");
                                myString[tapeHead] = '_';
                                updateTape(myString);
                                sum--;
                            }

                        case "q6":
                            Thread.sleep(1000);
                            txtArea2.append("\n");
                            txtArea2.append("The program has successfully reached the final State");
                            txtArea3.append("The program is in Final State\n");
                            txtArea3.append("The sum is: " + sum + "\n");
                            txtArea3.append("Input Accepted\n");
                            return null;
                            
                        case "qH":
                            Thread.sleep(1000);
                            txtArea2.append("\n");
                            txtArea3.append("The program is in Halting State\n");
                            txtArea3.append("Input Rejected\n");
                            return null;

	                default:
                            Thread.sleep(1000);
                            JOptionPane.showMessageDialog(TuringMachine.this, "Invalid state encountered. Halting.");
	                    return null; 
	            }
                    
                    // Update the tape after each transition
                    updateTape(myString);
                    Thread.sleep(1000); // Slow down the transition to visualize better
	        }
            
            return null; // Returning null as there is no meaningful return value
            }
        
        @Override
        protected void done() {
            // UI updates after worker is done, ensure no exception handling issue
            SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(TuringMachine.this, "Execution completed!");
            });
        }
        
        };
        
        worker.execute(); // Start the worker asynchronously    
    }//GEN-LAST:event_btnInputActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        currentState = "q0"; // Reset to the initial state
        tapeHead = 0; // Reset tape head position
        sum = 0; // Reset sum
        updateTape(new char[TAPE_SIZE]); // Reset the tape
        
        txtArea2.setText("");
        txtInput.setText("");
        txtArea3.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MACHINE mainMenu = new MACHINE();
        mainMenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void updateTextArea(String message) {
        SwingUtilities.invokeLater(() -> txtArea2.append(message));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TuringMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TuringMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TuringMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TuringMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TuringMachine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnInput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel tapepanel;
    private javax.swing.JTextArea txtArea1;
    private javax.swing.JTextArea txtArea2;
    private javax.swing.JTextArea txtArea3;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables
}
